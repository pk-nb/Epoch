{div, form, button, p, h1, hr, span, img, input, label, a} = React.DOM

NewTweetPanel = React.createClass
  displayName: 'NewTweetPanel'

  getInitialState: ->
    tweetErrors: []
    spinnerOn: false

  onPostSuccess: (data) ->
    console.log data
    console.log @props.timelines
    timelines = @props.timelines
    timelines.push(data)
    @props.setAppState(timelines: timelines)
    userTimelines = @props.userTimelines
    userTimelines.push(data)
    @setState(spinnerOn: false)
    @props.setAppState(userTimelines: userTimelines)
    @props.goBack()

  onPostError: (messages) ->
    # Render error by setting state
    console.log 'Ajax failure'
    console.log(messages)
    @setState(spinnerOn: false)
    @setState(tweetErrors: messages)


  handleSubmit: (e) ->
    e.preventDefault()
    @setState(spinnerOn: true)
    form_data = $(@refs.newTweetForm.getDOMNode()).serialize()
    # if the user hasn't chosen an option from the selector, use the text field value
    $.ajax {
      type: 'POST',
      url: Routes.tweets_path(),
      data: form_data,
      dataType: 'json'

      success: (data, status, xhr) =>
        console.log 'Ajax success'
        @onPostSuccess(data)
        @refs.newTweetForm.getDOMNode().reset()

      error: (xhr, status, error) =>
        # Retrieve/parse error messages from response text
        messages = [];
        try messages = JSON.parse(xhr.responseText).errors
        catch e then messages = [xhr.responseText]
        # todo IJH 11/30/2014: errors will need to be changed to display by the appropriate form
        @onPostError(messages)
    }

  renderErrors: ->
    div className: 'form-errors',
      @state.tweetErrors.map (error) =>
        p key: error + 'NewTweetPanel',
          error

  submitButton: ->
    if @state.spinnerOn
      p className: 'button disabled with-spinner',
        span className: 'spinner',
          span className: 'double-bounce1',
            ''
          span className: 'double-bounce2',
            ''
        span className: 'text',
          'Submitting...'

    else
      button className: 'button',
        'Submit'

  render: ->
    Forms = window.EpochForms
    div className: 'panel new-tweet-panel',
      h1 null,
        'Import from Twitter'
      @renderErrors()
      form ref: 'newTweetForm', onSubmit: @handleSubmit,
        div dangerouslySetInnerHTML: { __html: Forms.newTweet },
         null
        @submitButton()


@.EpochUI ?= {}
@.EpochUI.NewTweetPanel = NewTweetPanel
