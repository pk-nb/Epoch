{div, form, button, p, h1, hr, span, img, input, label, a} = React.DOM

NewRepoPanel = React.createClass
  displayName: 'NewRepoPanel'

  getInitialState: ->
    repoErrors: []

  onPostSuccess: (data) ->
    timelines = @props.timelines
    userTimelines = @props.userTimelines
    timelines.push(data)
    userTimelines.push(data)
    data.timelines.map (t) =>
      userTimelines.push(t)
    #todo IJH 12/4/2014 add all child timelines to userTimelines prop
    @props.setAppState(timelines: timelines)
    @props.setAppState(userTimelines: userTimelines)
    @props.goBack()

  onPostError: (messages) ->
    # Render error by setting state
    console.log 'Ajax failure'
    console.log(messages)
    @setState(repoErrors: messages)

  handleSubmit: (e) ->
    e.preventDefault()
    $.ajax {
      type: 'POST',
      url: Routes.repository_index_path(),
      data: $(@refs.newRepoForm.getDOMNode()).serialize(),
      dataType: 'json'

      success: (data, status, xhr) =>
        console.log 'Ajax success'
        @onPostSuccess(data)
        @refs.newRepoForm.getDOMNode().reset()

      error: (xhr, status, error) =>
        # Retrieve/parse error messages from response text
        messages = [];
        try messages = JSON.parse(xhr.responseText).errors
        catch e then messages = [xhr.responseText]
        #todo IJH 11/23/2014: errors will need to be changed to display by the appropriate form
        @onPostError(messages)
    }

  handleAddRepoName: ->
    (e) =>
      e.preventDefault()
      repos = @props.repos
      repo_input = $(@refs.addRepo.getDOMNode())
      newName = repo_input.val()
      if newName != ''
        repos.push(repo_input.val())
        repo_input.val('')
        @props.setAppState(repos: repos)

  renderErrors: ->
    div className: 'form-errors',
      @state.repoErrors.map (error) =>
        p key: error + 'NewRepoPanel',
          error

  render: ->
    Forms = window.EpochForms
    div className: 'panel new-repo-panel',
      # Github import form
      h1 null,
          'Import from Github'
      @renderErrors()
      form ref: 'newRepoForm', onSubmit: @handleSubmit,
        div dangerouslySetInnerHTML: { __html: Forms.newRepository },
          null
        div null,
          label htmlFor: 'name',
            'Timeline Name'
          input {type: 'text', className: 'narrow-input', name: 'name'}
        div className: 'section repos',
          @props.repos.map (repo) =>
            div key: repo,
              input { type: 'checkbox', name: 'repos[]', value: repo},
                repo
          div null,
            label htmlFor: 'additional_repo',
                  'Other Repo'
            div className: 'two-column',
              input {ref: 'addRepo', type: 'text', className: 'narrow-input', name: 'additional_repo'}
              button {className: 'plus-button', onClick: @handleAddRepoName() },
                img { className: 'plus-icon', src: '<%= asset_path 'plus-icon.svg' %>'}
        button className: 'button',
          'Submit'


@.EpochUI ?= {}
@.EpochUI.NewRepoPanel = NewRepoPanel
