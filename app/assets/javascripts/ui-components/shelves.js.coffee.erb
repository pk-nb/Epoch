{div, p, a, button, img, span} = React.DOM

UserNameMixin =
  user: ->
    if @props.user
      div className: 'shelf-user',
        p { onClick: @props.handleClick(@props.panelIds.user), className: 'dropdown-link' },
          img {className: 'avatar', src: @props.user.picture},
          span null,
            @props.user.name
    else
      p { onClick: @props.handleClick(@props.panelIds.user), className: 'dropdown-link' },
        'Login'

TimelineTitleMixin =
  # TODO Show more with on larger screen real estate (resize event, initial px grab)
  # TODO refactor
  timelineTitle: ->
    maxTimelineCount = 2

    if @props.timelines.length > maxTimelineCount
      timelineCount = maxTimelineCount
    else
      timelineCount = @props.timelines.length

    if timelineCount > 0
      # Concat titles together
      concatString = @props.timelines[0].title
      for i in [1..timelineCount]
        if i != timelineCount
          concatString += ", #{@props.timelines[i].title}"

      # Show +X more if necessary
      if @props.timelines.length > timelineCount
        concatString = "#{concatString}, +#{@props.timelines.length - timelineCount} More..."
      concatString
    else
      'Select Timelines'


DefaultTopShelf = React.createClass
  displayName: 'DefaultTopShelf'
  mixins: [UserNameMixin, TimelineTitleMixin]

  render: ->
    div className: 'shelf',
      div className: 'left',
        p className: 'logo',
          'Epoch'
      div className: 'center',
        p { onClick: @props.handleClick(@props.panelIds.timeline), className: 'dropdown-link'},
          @timelineTitle()
      div className: 'right',
        @user()


UserShelf = React.createClass
  displayName: 'UserShelf'
  mixins: [UserNameMixin]

  render: ->
    div className: 'shelf',
      div className: 'left',
        ''
      div className: 'center',
        p null,
          if @props.user then 'User Profile' else 'Login'
      div className: 'right',
        img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}


TimelineShelf = React.createClass
  displayName: 'TimelineShelf'

  render: ->
    div className: 'shelf',
      div className: 'left',
        img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
      div className: 'center',
        p { onClick: @props.handleClick(), className: 'dropdown-link'},
          'Select Timelines'
      div className: 'right',
        ''

NewTimelineShelf = React.createClass
  displayName: 'NewTimelineShelf'

  render: ->
    div className: 'shelf',
      div className: 'left',
        p { className: 'clickable', onClick: @props.handleClick(@props.panelIds.timeline) },
          img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'back.svg' %>'},
          'Back'
        # img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
      div className: 'center',
        p null,
          'New Timeline'
      div className: 'right',
        ''

NewRepoShelf = React.createClass
  displayName: 'NewRepoShelf'

  render: ->
    div className: 'shelf',
      div className: 'left',
        p { className: 'clickable', onClick: @props.handleClick(@props.panelIds.timeline) },
          img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'back.svg' %>'},
          'Back'
        # img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
      div className: 'center',
        p null,
          'Import Repositories as Timelines'
      div className: 'right',
        ''

NewTweetShelf = React.createClass
  displayName: 'NewTweetShelf'

  render: ->
    div className: 'shelf',
      div className: 'left',
        p { className: 'clickable', onClick: @props.handleClick(@props.panelIds.timeline) },
          img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'back.svg' %>'},
          'Back'
        # img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
      div className: 'center',
        p null,
          'Import Twitter Timelines'
      div className: 'right',
        ''


DefaultBottomShelf = React.createClass
  displayName: 'DefaultBottomShelf'

  currentDateText: ->
    # TODO use date format appropriate to zoom level
    if @props.currentDate?
      cD = @props.currentDate
      "#{cD.getMonth() + 1}/#{cD.getDate()}/#{cD.getFullYear()}"
    else
      'Select a Timeline'

  render: ->
    div className: 'shelf',
      div className: 'left',
        p { onClick: @props.handleClick(@props.panelIds.newEvent),  },
          img {className: 'shelf-icon icon-margin-right', src: '<%= asset_path 'plus-icon.svg' %>'},
          span className: 'dropdown-link',
            'Add Event'
      div className: 'center',
        # Current Date
        p null,
          @currentDateText()
      div className: 'right',
        ''

EventDateMixin =
  # TODO improve date format & refactor this
  # TODO use date format appropriate to zoom level
  dateStringForEvent: (event) ->
    if event.start_date != event.end_date
      sD = new Date(event.start_date)
      eD = new Date(event.end_date)
      "#{sD.getMonth() + 1}/#{sD.getDate()}/#{sD.getFullYear()} #{sD.getHours()}:#{if sD.getMinutes() < 10 then '0' else ''}#{sD.getMinutes()}" +
      " â€“ " +
      "#{eD.getMonth() + 1}/#{eD.getDate()}/#{eD.getFullYear()} #{eD.getHours()}:#{if eD.getMinutes() < 10 then '0' else ''}#{eD.getMinutes()}"
    else
      cD = new Date(event.start_date)
      "#{cD.getMonth() + 1}/#{cD.getDate()}/#{cD.getFullYear()} #{cD.getHours()}:#{if cD.getMinutes() < 10 then '0' else ''}#{cD.getMinutes()}"


SelectedEventShelf = React.createClass
  displayName: 'SelectedEventShelf'
  mixins: [EventDateMixin]

  render: ->
    div className: 'shelf',
      div className: 'left',
        div className: '',
          p { onClick: @props.handleClick(@props.panelIds.event), className: 'selected truncate'},
            span className: 'dropdown-link',
              @props.selectedEvent.title
      div className: 'center',
        p null,
          @dateStringForEvent(@props.selectedEvent)
      div className: 'right',
        ''
        # p { onClick: @props.handleClick(@props.panelIds.newEvent), className: 'dropdown-link' },
        #   img {className: 'shelf-icon', src: '<%= asset_path 'plus-icon.svg' %>'}


NewEventShelf = React.createClass
  displayName: 'NewEventShelf'

  render: ->
    div className: 'shelf',
      div className: 'left',
        img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
      div className: 'center',
        p null,
          'New Event'
      div className: 'right',
        ''


EventShelf = React.createClass
  displayName: 'EventShelf'
  mixins: [EventDateMixin]

  render: ->
    selectedEvent = @props.selectedEvent
    div className: 'shelf',
      div className: 'left',
        img {onClick: @props.handleClick(), className: 'shelf-icon', src: '<%= asset_path 'x-icon.svg' %>'}
          # p { onClick: @props.handleClick(), className: 'dropdown-link'},
          #   selectedEvent.title
      div className: 'center',
        p null,
          @dateStringForEvent(@props.selectedEvent)
      div className: 'right',
        ''



@.EpochUI ?= {}
@.EpochUI.DefaultTopShelf = DefaultTopShelf
@.EpochUI.UserShelf = UserShelf
@.EpochUI.TimelineShelf = TimelineShelf

@.EpochUI.NewTimelineShelf = NewTimelineShelf
@.EpochUI.NewRepoShelf = NewRepoShelf
@.EpochUI.NewTweetShelf = NewTweetShelf

@.EpochUI.DefaultBottomShelf = DefaultBottomShelf
@.EpochUI.SelectedEventShelf = SelectedEventShelf
@.EpochUI.NewEventShelf = NewEventShelf
@.EpochUI.EventShelf = EventShelf
